library(raster)
library(lubridate)
library(RCurl)
library(magrittr)
library(R.utils)
setwd("/home/csaybar/Documents/Github/PISCO_libelula/")
source("utils.R")
path = "/home/csaybar/" # path to save data
day_seq <- seq(as.Date("1981-01-01"), as.Date("2020-07-31"), "day")
month_seq <- seq(as.Date("1981-01-01"), as.Date("2020-07-31"), "month")
path = "/home/csaybar/" # path to save data
chirps_list <- list()
chirp_path <- sprintf("%s/data/CHIRP_0.05/CHIRPd/", path)
chirp_path
output <- sprintf("%s/data/", path)
output <- sprintf("%s/data/", path)
cf <-  sprintf("%s/CHIRPd_%s_%s.nc", output, years[1], years[length(years)])
cf
chirps_raster <- list.files(path = chirp_path,
pattern = "\\.tif$",
full.names = TRUE,
recursive=TRUE) %>%
raster::stack() %>%
raster::brick()
chirps_raster <- list.files(path = chirp_path,
pattern = "\\.tif$",
full.names = TRUE,
recursive=TRUE)
chirps_raster
year <- 1981
year
year
year
chirps_raster <- list.files(path = chirp_path,
pattern = year,
full.names = TRUE,
recursive=TRUE)
year
chirp_path
chirps_raster <- list.files(path = chirp_path,
pattern = year,
full.names = TRUE,
recursive=TRUE)
year
chirps_raster <- list.files(path = chirp_path,
pattern = year %>% as.character(),
full.names = TRUE,
recursive=TRUE)
chirps_raster
chirps_raster
chirps_raster
chirps_raster <- list.files(path = chirp_path,
pattern = year %>% as.character(),
full.names = TRUE,
recursive=TRUE) %>%
raster::stack() %>%
raster::brick()
chirps_raster
chirps_raster
library(lubridate)
chirps_raster
length(chirps_raster)
nlayers(chirps_raster)
years(1981)
years(1981)
time_length(years(1981))
leap_year(1981)
leap_year(1982)
leap_year(1984)
leap_year(year)
nlayers(chirps_raster)
nlayers(chirps_raster)
chirps_raster
x <- chirps_raster
x
year
length(x)
nlayers(x)
leap_year(year)
leap_year(year)
leap_year(year)
nlayers(x)
condition
if (leap_year(year)) {
condition <- nlayers(x)  ==  366
} else {
condition <- nlayers(x)  ==  365
}
condition
if (leap_year(year)) {
condition <- nlayers(x)  ==  366
} else {
condition <- nlayers(x)  ==  365
}
condition
!condition
stop("Missing files!\nActual:%s\nExpected:%s")
nlyrs <- nlayers(x)
nlyrs
nlyrs <- nlayers(x)
if (leap_year(year)) {
condition <- nlyrs  ==  366
} else {
condition <- nlyrs  ==  365
}
if (!condition) {
stop(sprintf("Missing files!\nActual:%s\nExpected:%s", ))
}
stop(sprintf("Missing files!\nActual:%s\nExpected:%s", nlyrs, year))
nlyrs <- nlayers(x)
if (leap_year(year)) {
y_length <- 366
} else {
y_length <- 365
}
condition <- nlyrs  ==  y_length
condition <- nlyrs  ==  y_length
condition
!condition
stop(sprintf("Missing files!\nActual:%s\nExpected:%s", nlyrs, year))
#' Test is exist
test_lenght_years <- function(x, year) {
nlyrs <- nlayers(x)
if (leap_year(year)) {
y_length <- 366
} else {
y_length <- 365
}
condition <- nlyrs  ==  y_length
if (!condition) {
stop(sprintf("Missing files!\nActual:%s\nExpected:%s", nlyrs, y_length))
}
}
stop(sprintf("Missing files!\nActual:%s\nExpected:%s", nlyrs, y_length))
#' Test is exist
test_lenght_years <- function(x, year) {
nlyrs <- nlayers(x)
if (leap_year(year)) {
y_length <- 366
} else {
y_length <- 365
}
condition <- nlyrs  ==  y_length
if (!condition) {
stop(sprintf("Missing files!\nActual:%s\nExpected:%s", nlyrs, y_length))
}
}
chirps_raster
x = chirps_raster
nlyrs <- nlayers(x)
if (leap_year(year)) {
y_length <- 366
} else {
y_length <- 365
}
condition <- nlyrs  ==  y_length
if (!condition) {
stop(sprintf("Missing files!\nActual:%s\nExpected:%s", nlyrs, y_length))
}
test_lenght_years(x = chirps_raster, year)
chirps_raster
cf
chirps_list <- list()
chirp_path <- sprintf("%s/data/CHIRP_0.05/CHIRPd/", path)
output <- sprintf("%s/data/", path)
cf <-  sprintf("%s/CHIRPd_%s_%s.nc", output, years[1], years[length(years)])
cf
cf <-  sprintf("%s/CHIRPd_%s_%s.nc", output, years[1], years[length(years)])
chirps_list <- list()
chirp_path <- sprintf("%s/data/CHIRP_0.05/CHIRPd/", path)
output <- sprintf("%s/data/", path)
years
years = 1981:2019
chirps_list <- list()
chirp_path <- sprintf("%s/data/CHIRP_0.05/CHIRPd/", path)
output <- sprintf("%s/data/", path)
cf <-  sprintf("%s/CHIRPd_%s_%s.nc", output, years[1], years[length(years)])
cf
# List all files by year and create a datacube
chirps_raster <- list.files(path = chirp_path,
pattern = year %>% as.character(),
full.names = TRUE,
recursive=TRUE) %>%
raster::stack() %>%
raster::brick()
# Test if exist the expected number of files
test_lenght_years(x = chirps_raster, year)
chirps_raster
cf
output
# Output name
cf <-  sprintf("%s/CHIRPd_%s.nc", output, years[1])
cf
chirps_raster
cf
# Output name
cf <-  sprintf("%s/CHIRPd_%s.nc", output, years[1])
# Save it!
writeRaster(
x = chirps_raster,
filename =  cf,
overwrite = TRUE
)
years
seq_len(years)
seq_along(years)
#  necessary paths
chirp_path <- sprintf("%s/data/CHIRP_0.05/CHIRPd/", path)
output <- sprintf("%s/data/", path)
years
year
# List all files by year and create a datacube
chirps_raster <- list.files(path = chirp_path,
pattern = year %>% as.character(),
full.names = TRUE,
recursive=TRUE) %>%
raster::stack() %>%
raster::brick()
# Test if exist the expected number of files
test_lenght_years(x = chirps_raster, year)
# Output name
cf <-  sprintf("%s/CHIRPd_%s.nc", output, years[1])
year
# Output name
cf <-  sprintf("%s/CHIRPd_%s.nc", output, year)
cf
# Save it!
writeRaster(
x = chirps_raster,
filename =  cf,
overwrite = TRUE
)
for (year in years) {
# List all files by year and create a datacube
chirps_raster <- list.files(path = chirp_path,
pattern = year %>% as.character(),
full.names = TRUE,
recursive=TRUE) %>%
raster::stack() %>%
raster::brick()
# Test if exist the expected number of files
test_lenght_years(x = chirps_raster, year)
# Output name
cf <-  sprintf("%s/CHIRPd_%s.nc", output, year)
# Save it!
writeRaster(
x = chirps_raster,
filename =  cf,
overwrite = TRUE
)
}
# Save it!
sprintf("Saving netcdf year", year)
year
# Save it!
sprintf("Saving netcdf year: %s", year)
# Save it!
message(sprintf("Saving netcdf year: %s", year))
for (year in years) {
# List all files by year and create a datacube
chirps_raster <- list.files(path = chirp_path,
pattern = year %>% as.character(),
full.names = TRUE,
recursive=TRUE) %>%
raster::stack() %>%
raster::brick()
# Test if exist the expected number of files
test_lenght_years(x = chirps_raster, year)
# Output name
cf <-  sprintf("%s/CHIRPd_%s.nc", output, year)
# Save it!
message(sprintf("Saving netcdf year: %s", year))
writeRaster(
x = chirps_raster,
filename =  cf,
overwrite = TRUE
)
}
for (year in years) {
# List all files by year and create a datacube
chirps_raster <- list.files(path = chirp_path,
pattern = year %>% as.character(),
full.names = TRUE,
recursive=TRUE) %>%
raster::stack() %>%
raster::brick()
# Test if exist the expected number of files
#test_lenght_years(x = chirps_raster, year)
# Output name
cf <-  sprintf("%s/CHIRPd_%s.nc", output, year)
# Save it!
message(sprintf("Saving netcdf year: %s", year))
writeRaster(
x = chirps_raster,
filename =  cf,
overwrite = TRUE
)
}
create_CHIRPd_netcdf2 <- function(path, years = 1981:2019) {
#  necessary paths
chirp_path <- sprintf("%s/data/CHIRP_0.05/CHIRPd/", path)
output <- sprintf("%s/data/", path)
for (year in years) {
# List all files by year and create a datacube
chirps_raster <- list.files(path = chirp_path,
pattern = year %>% as.character(),
full.names = TRUE,
recursive=TRUE) %>%
raster::stack() %>%
raster::brick()
# Test if exist the expected number of files
#test_lenght_years(x = chirps_raster, year)
# Output name
cf <-  sprintf("%s/CHIRPd_%s.nc", output, year)
# Save it!
message(sprintf("Saving CHIRPd netcdf year: %s", year))
writeRaster(
x = chirps_raster,
filename =  cf,
overwrite = TRUE
)
}
}
#  necessary paths
chirp_path <- sprintf("%s/data/CHIRP_0.05/CHIRPm/", path)
chirp_path
output <- sprintf("%s/data/", path)
output
#  necessary paths
chirp_path <- sprintf("%s/data/CHIRP_0.05/CHIRPm/", path)
output <- sprintf("%s/data/", path)
#  necessary paths
chirp_path <- sprintf("%s/data/CHIRP_0.05/CHIRPm/", path)
output <- sprintf("%s/data/", path)
#  necessary paths
chirp_path <- sprintf("%s/data/CHIRP_0.05/CHIRPm/", path)
output <- sprintf("%s/data/", path)
output
chirp_path
years
years
create_CHIRPd_netcdf2 <- function(path, years = 1981:2019) {
#  necessary paths
chirp_path <- sprintf("%s/data/CHIRP_0.05/CHIRPd/", path)
output <- sprintf("%s/data/", path)
for (year in years) {
# List all files by year and create a datacube
chirps_raster <- list.files(path = chirp_path,
pattern = year %>% as.character(),
full.names = TRUE,
recursive=TRUE) %>%
raster::stack() %>%
raster::brick()
# Test if exist the expected number of files
#test_lenght_years(x = chirps_raster, year)
# Output name
cf <-  sprintf("%s/CHIRPd_%s.nc", output, year)
# Save it!
message(sprintf("Saving CHIRPd netcdf year: %s", year))
writeRaster(
x = chirps_raster,
filename =  cf,
overwrite = TRUE
)
}
}
library(raster)
library(lubridate)
library(RCurl)
library(magrittr)
library(R.utils)
source("utils.R")
path = "/home/csaybar/" # path to save data
day_seq <- seq(as.Date("1981-01-01"), as.Date("2020-07-31"), "day")
month_seq <- seq(as.Date("1981-01-01"), as.Date("2020-07-31"), "month")
# 4.Test if all the necessary files are saved
test_CHIRP(path)
# 5. Create data cubes
create_CHIRPd_netcdf2(path)
